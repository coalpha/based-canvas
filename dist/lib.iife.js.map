{"version":3,"file":"lib.iife.js","sources":["../src/DPR.ts","../src/FPR.ts","../src/isPrettyMuchAnInteger.ts","../src/BasedCanvas.ts"],"sourcesContent":["import Runnable from \"./Runnable\";\n\nlet lastdpr = window.devicePixelRatio;\n\nconst listeners: Runnable[] = [];\n\nfunction updateDPR() {\n   const newdpr = window.devicePixelRatio;\n   if (lastdpr !== newdpr) {\n      listeners.forEach(ru => ru());\n   }\n}\n\nwindow.addEventListener(\"resize\", updateDPR);\n\nexport default listeners.push.bind(listeners);\n","import Runnable from \"./Runnable\";\nimport addDPRListener from \"./DPR\";\nimport kindaInt from \"./isPrettyMuchAnInteger\";\nimport { DisplayPixels, CSSPixels } from \"./pixels\";\n\nconst listeners: Runnable[] = [];\n\nexport const addListener = listeners.push.bind(listeners);\n\nexport const currentFPR = {\n   dpx: 0 as DisplayPixels,\n   cpx: 0 as CSSPixels,\n};\n\nconst CSS_PIXELS_LIMIT = 100;\n\nfunction getFPR(): [DisplayPixels, CSSPixels] {\n   const dpr = window.devicePixelRatio;\n   for (let co = 1; co < CSS_PIXELS_LIMIT; co++) {\n      if (kindaInt(dpr * co)) {\n         return [\n            Math.round(dpr * co) as DisplayPixels,\n            co as CSSPixels,\n         ];\n      }\n   }\n   return [\n      1 as DisplayPixels,\n      1 as CSSPixels,\n   ];\n}\n\nfunction updateFPR() {\n   const [dpx, cpx] = getFPR();\n   currentFPR.dpx = dpx;\n   currentFPR.cpx = cpx;\n   listeners.forEach(ru => ru());\n}\n\nupdateFPR();\n\naddDPRListener(updateFPR);\n","const TOLERANCE = 0.001;\n\nexport default function isPrettyMuchAnInteger(n: number): boolean {\n   return Math.abs(n - (n|0)) < TOLERANCE;\n}\n","import Runnable from \"./Runnable\";\nimport IBasedCanvas from \"./IBasedCanvas\";\nimport { RasterUnits, DisplayPixels, CSSPixels } from \"./pixels\";\nimport { currentFPR, addListener } from \"./FPR\";\n\nexport default class BasedCanvas implements IBasedCanvas {\n   static currentFPR = currentFPR;\n   static addFPRListener = addListener;\n\n   readonly #ctx: CanvasRenderingContext2D;\n   #ctxWidth!: RasterUnits;\n   #ctxHeight!: RasterUnits;\n   get ctx() { return this.#ctx }\n   get ctxWidth() { return this.#ctxWidth }\n   get ctxHeight() { return this.#ctxHeight }\n\n   readonly #canvas: HTMLCanvasElement;\n   #canvasWidth!: CSSPixels;\n   #canvasHeight!: CSSPixels;\n   get canvas() { return this.#canvas }\n   get canvasWidth() { return this.#canvasWidth }\n   get canvasHeight() { return this.#canvasHeight }\n\n   readonly #container: HTMLElement;\n   #containerWidth!: CSSPixels;\n   #containerHeight!: CSSPixels;\n   get container() { return this.#container }\n   get containerWidth() { return this.#containerWidth }\n   get containerHeight() { return this.#containerHeight }\n\n   #fprCountX!: number;\n   #fprCountY!: number;\n   get fprCountX() { return this.#fprCountX }\n   get fprCountY() { return this.#fprCountY }\n\n   constructor (container: HTMLElement, alpha = false) {\n      const canvas = document.createElement(\"canvas\");\n      const ctx = canvas.getContext(\"2d\", { alpha });\n      if (ctx == null) {\n         throw new Error('HTMLElement.getContext(\"2d\") returned null!');\n      }\n      container.appendChild(canvas);\n\n      addListener(this.lfprChanged.bind(this));\n\n      const RO = new ResizeObserver(this.lcontainerResized.bind(this));\n      RO.observe(container);\n\n      this.#ctx = ctx;\n      this.#canvas = canvas;\n      this.#container = container;\n   }\n\n   private lfprChanged() {\n      this.recalc();\n   }\n\n   private lcontainerResized([{contentRect: { width, height }}]: ResizeObserverEntry[]) {\n      this.#containerWidth = width as CSSPixels;\n      this.#containerHeight = height as CSSPixels;\n      this.recalc();\n      this.callContainerListeners()\n   }\n\n   fetch() {\n      this.#ctxWidth = this.#canvas.width as RasterUnits;\n      this.#ctxHeight = this.#canvas.height as RasterUnits;\n\n      const canvasProps = window.getComputedStyle(this.#canvas);\n      this.#canvasWidth = +canvasProps.width.slice(-2) as CSSPixels;\n      this.#canvasHeight = +canvasProps.height.slice(-2) as CSSPixels;\n\n      const containerProps = window.getComputedStyle(this.#container);\n      this.#containerWidth = +containerProps.width.slice(-2) as CSSPixels;\n      this.#containerHeight = +containerProps.height.slice(-2) as CSSPixels;\n\n      this.recalc();\n   }\n\n   recalc() {\n      const { dpx, cpx } = currentFPR;\n\n      const fprCX = this.#containerWidth / cpx | 0;\n      const fprCY = this.#containerHeight / cpx | 0;\n      this.#fprCountX = fprCX;\n      this.#fprCountY  = fprCY;\n\n      const newCtxWidth = fprCX * dpx as DisplayPixels;\n      const newCtxHeight = fprCY * dpx as DisplayPixels;\n\n      if (\n         (newCtxWidth !== this.#ctxWidth)\n         ||\n         (newCtxHeight !== this.#ctxHeight)\n      ) {\n         this.setCtxSize(newCtxWidth, newCtxHeight);\n         this.#ctxWidth = newCtxWidth;\n         this.#ctxHeight = newCtxHeight;\n      }\n\n      const newCanvasWidth = fprCX * cpx as CSSPixels;\n      const newCanvasHeight = fprCY * cpx as CSSPixels;\n\n      if (\n         (newCanvasWidth !== this.#canvasWidth)\n         ||\n         (newCanvasHeight !== this.#canvasHeight)\n      ) {\n         this.setCanvasSize(newCanvasWidth, newCanvasHeight);\n         this.#canvasWidth = newCanvasWidth;\n         this.#canvasHeight = newCanvasHeight;\n      }\n   }\n\n   private setCanvasSize(width: CSSPixels, height: CSSPixels) {\n      this.#canvas.style.width = `${width}px`;\n      this.#canvas.style.height = `${height}px`;\n      this.callCanvasListeners();\n   }\n\n   private setCtxSize(width: RasterUnits, height: RasterUnits) {\n      this.#canvas.width = this.#ctxWidth = width;\n      this.#canvas.height = this.#ctxHeight = height;\n      this.callCtxListeners();\n   }\n\n   #ctxListeners: Runnable[] = [];\n   // it's times like this that make you want the function bind syntax\n   addCtxResizeListener = this.#ctxListeners.push.bind(this.#ctxListeners);\n   private callCtxListeners() {\n      this.#ctxListeners.forEach(ru => ru());\n   }\n\n   #canvasListeners: Runnable[] = [];\n   addCanvasResizeListener = this.#canvasListeners.push.bind(this.#canvasListeners);\n   private callCanvasListeners() {\n      this.#canvasListeners.forEach(ru => ru());\n   }\n\n   #containerListeners: Runnable[] = [];\n   addContainerResizeListener = this.#containerListeners.push.bind(this.#containerListeners);\n   private callContainerListeners() {\n      this.#containerListeners.forEach(ru => ru());\n   }\n}\n"],"names":["lastdpr","window","devicePixelRatio","listeners","addEventListener","newdpr","forEach","ru","push","bind","addListener","currentFPR","dpx","cpx","updateFPR","dpr","co","n","Math","abs","round","getFPR","addDPRListener","BasedCanvas","[object Object]","container","alpha","_ctx","_ctxWidth","_ctxHeight","_canvas","_canvasWidth","_canvasHeight","_container","_containerWidth","_containerHeight","_fprCountX","_fprCountY","_ctxListeners","this","__classPrivateFieldGet","_canvasListeners","_containerListeners","canvas","document","createElement","ctx","getContext","Error","appendChild","lfprChanged","ResizeObserver","lcontainerResized","observe","__classPrivateFieldSet","ctxWidth","ctxHeight","canvasWidth","canvasHeight","containerWidth","containerHeight","fprCountX","fprCountY","recalc","contentRect","width","height","callContainerListeners","canvasProps","getComputedStyle","slice","containerProps","fprCX","fprCY","newCtxWidth","newCtxHeight","setCtxSize","newCanvasWidth","newCanvasHeight","setCanvasSize","style","callCanvasListeners","callCtxListeners"],"mappings":"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"}