{"version":3,"file":"lib.js","sources":["../src/lib.ts"],"sourcesContent":["type IntegerBlock = {\n   css: number;\n   display: number;\n};\n\ntype IntegerBlockCount = {\n   countX: number;\n   countY: number;\n}\n\nexport default class PixelCanvas {\n   private static integerBlockLimit = 100;\n   private static getIntegerBlock(): IntegerBlock {\n      const dpr = window.devicePixelRatio;\n      for (let i = 1; i < PixelCanvas.integerBlockLimit; i++) {\n         if (Number.isInteger(dpr * i)) {\n            return {\n               css: i,\n               display: dpr * i,\n            };\n         }\n      }\n      return {\n         css: 1|0,\n         display: 1|0,\n      };\n   }\n\n   #integerBlock: IntegerBlock = PixelCanvas.getIntegerBlock();\n\n   get integerBlock() {\n      return {\n         css: this.#integerBlock.css|0,\n         display: this.#integerBlock.display|0,\n      };\n   }\n   readonly #integerBlockCount: IntegerBlockCount = {\n      countX: 0|0,\n      countY: 0|0,\n   };\n\n   get integerBlockCount() {\n      return {\n         countX: this.#integerBlockCount.countX|0,\n         countY: this.#integerBlockCount.countY|0,\n      };\n   }\n\n   private setCanvasCSSSize(width: number, height: number) {\n      this.#canvas.style.width = `${width}px`;\n      this.#canvas.style.height = `${height}px`;\n   }\n\n   private setContextSize(width: number, height: number) {\n      // annoyingly, these get cleared when the HTMLCanvasElement is resized\n      // so we can't ctx.save\n      // this.#ctx.save();\n      this.#canvas.width = width;\n      this.#canvas.height = height;\n      // this.#ctx.restore();\n      this.redraw();\n   }\n\n   private containerResized(entries: ResizeObserverEntry[]) {\n      const container = entries[0];\n      const containerSize = container.borderBoxSize;\n      const containerWidth = containerSize.inlineSize;\n      const containerHeight = containerSize.blockSize;\n\n      const { css, display } = this.integerBlock;\n      const intBlockX = containerWidth / css | 0;\n      const intBlockY = containerHeight / css | 0;\n      this.#integerBlockCount.countX = intBlockX;\n      this.#integerBlockCount.countY = intBlockY;\n\n      this.setCanvasCSSSize(intBlockX * css, intBlockY * css);\n      this.setContextSize(intBlockX * display, intBlockY * display);\n   }\n\n   private containerResizedObserver = new ResizeObserver(this.containerResized.bind(this));\n\n   private registerListeners() {\n      this.containerResizedObserver.observe(this.#container);\n      window.addEventListener(\"resize\", this.setIntegerBlock.bind(this));\n   }\n\n   private setIntegerBlock() {\n      this.#integerBlock = PixelCanvas.getIntegerBlock();\n   }\n\n   /** You should probably write your own redraw function */\n   public redraw = () => {};\n\n   readonly #container: HTMLElement;\n   readonly #canvas: HTMLCanvasElement;\n   readonly #ctx: CanvasRenderingContext2D;\n   get container() { return this.#container; }\n   get canvas() { return this.#canvas; }\n   get ctx() { return this.#ctx; }\n   constructor (container: HTMLElement, alpha = false) {\n      this.#container = container;\n      this.registerListeners();\n      this.#canvas = document.createElement(\"canvas\");\n      const ctx = this.#canvas.getContext(\"2d\", { alpha });\n      if (ctx == null) {\n         throw new TypeError('HTMLElement.getContext(\"2d\") returned null!');\n      }\n      this.#ctx = ctx; // I love flow analysis\n      container.appendChild(this.#canvas);\n   }\n\n   set fillStyle(val: string) {\n      this.#ctx.fillStyle = val;\n   }\n\n   public fillRectColor(x: number, y: number, width: number, height: number, color: string) {\n      this.#ctx.fillStyle = color;\n      this.#ctx.fillRect(x|0, y|0, width|0, height|0);\n   }\n\n   public fillRect(x: number, y: number, width: number, height: number) {\n      this.#ctx.fillRect(x|0, y|0, width|0, height|0);\n   }\n\n   public fillSquare(x: number, y: number, sideLength: number) {\n      this.#ctx.fillRect(x|0, y|0, sideLength|0, sideLength|0);\n   }\n\n   public strokeSquare(x: number, y: number, sideLength: number) {\n      this.#ctx.strokeRect(x|0, y|0, sideLength|0, sideLength|0);\n   }\n\n   public fillSquareColor(x: number, y: number, sideLength: number, color: string) {\n      this.#ctx.fillStyle = color;\n      this.#ctx.fillRect(x|0, y|0, sideLength|0, sideLength|0);\n   }\n}\n"],"names":["PixelCanvas","[object Object]","container","alpha","_integerBlock","getIntegerBlock","_integerBlockCount","countX","countY","this","ResizeObserver","containerResized","bind","_container","_canvas","_ctx","__classPrivateFieldSet","registerListeners","document","createElement","ctx","__classPrivateFieldGet","getContext","TypeError","appendChild","dpr","window","devicePixelRatio","i","integerBlockLimit","Number","isInteger","css","display","integerBlock","integerBlockCount","width","height","style","redraw","entries","containerSize","borderBoxSize","containerWidth","inlineSize","containerHeight","blockSize","intBlockX","intBlockY","setCanvasCSSSize","setContextSize","containerResizedObserver","observe","addEventListener","setIntegerBlock","canvas","fillStyle","val","x","y","color","fillRect","sideLength","strokeRect"],"mappings":"kQAUqBA,EAyFlBC,YAAaC,EAAwBC,GAAQ,GAvE7CC,WAA8BJ,EAAYK,mBAQ1CC,WAAiD,CAC9CC,OAAQ,EACRC,OAAQ,IAyCHC,8BAA2B,IAAIC,eAAeD,KAAKE,iBAAiBC,KAAKH,OAY1EA,YAAS,OAEhBI,mBACAC,mBACAC,mBAKGC,EAAAP,OAAkBP,GAClBO,KAAKQ,oBACLD,EAAAP,OAAeS,SAASC,cAAc,WACtC,MAAMC,EAAMC,UAAaC,WAAW,KAAM,CAAEnB,MAAAA,IAC5C,GAAW,MAAPiB,EACD,MAAM,IAAIG,UAAU,+CAEvBP,EAAAP,OAAYW,GACZlB,EAAUsB,uBAhGLvB,yBACL,MAAMwB,EAAMC,OAAOC,iBACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI5B,EAAY6B,kBAAmBD,IAChD,GAAIE,OAAOC,UAAUN,EAAMG,GACxB,MAAO,CACJI,IAAKJ,EACLK,QAASR,EAAMG,GAIxB,MAAO,CACJI,IAAK,EACLC,QAAS,GAMfC,mBACG,MAAO,CACJF,IAA4B,EAAvBX,UAAmBW,IACxBC,QAAoC,EAA3BZ,UAAmBY,SAQlCE,wBACG,MAAO,CACJ5B,OAAuC,EAA/Bc,UAAwBd,OAChCC,OAAuC,EAA/Ba,UAAwBb,QAI9BP,iBAAiBmC,EAAeC,GACrChB,UAAaiB,MAAMF,MAAQ,GAAGA,MAC9Bf,UAAaiB,MAAMD,OAAS,GAAGA,MAG1BpC,eAAemC,EAAeC,GAInChB,UAAae,MAAQA,EACrBf,UAAagB,OAASA,EAEtB5B,KAAK8B,SAGAtC,iBAAiBuC,GACtB,MACMC,EADYD,EAAQ,GACME,cAC1BC,EAAiBF,EAAcG,WAC/BC,EAAkBJ,EAAcK,WAEhCd,IAAEA,EAAGC,QAAEA,GAAYxB,KAAKyB,aACxBa,EAAYJ,EAAiBX,EAAM,EACnCgB,EAAYH,EAAkBb,EAAM,EAC1CX,UAAwBd,OAASwC,EACjC1B,UAAwBb,OAASwC,EAEjCvC,KAAKwC,iBAAiBF,EAAYf,EAAKgB,EAAYhB,GACnDvB,KAAKyC,eAAeH,EAAYd,EAASe,EAAYf,GAKhDhC,oBACLQ,KAAK0C,yBAAyBC,mBAC9B1B,OAAO2B,iBAAiB,SAAU5C,KAAK6C,gBAAgB1C,KAAKH,OAGvDR,kBACLe,EAAAP,OAAqBT,EAAYK,mBASpCH,gBAAkB,iBAClBqD,aAAe,iBACfnC,UAAY,iBAaZoC,cAAcC,GACXpC,UAAUmC,UAAYC,EAGlBxD,cAAcyD,EAAWC,EAAWvB,EAAeC,EAAgBuB,GACvEvC,UAAUmC,UAAYI,EACtBvC,UAAUwC,SAAW,EAAFH,EAAO,EAAFC,EAAW,EAANvB,EAAgB,EAAPC,GAGlCpC,SAASyD,EAAWC,EAAWvB,EAAeC,GAClDhB,UAAUwC,SAAW,EAAFH,EAAO,EAAFC,EAAW,EAANvB,EAAgB,EAAPC,GAGlCpC,WAAWyD,EAAWC,EAAWG,GACrCzC,UAAUwC,SAAW,EAAFH,EAAO,EAAFC,EAAgB,EAAXG,EAAyB,EAAXA,GAGvC7D,aAAayD,EAAWC,EAAWG,GACvCzC,UAAU0C,WAAa,EAAFL,EAAO,EAAFC,EAAgB,EAAXG,EAAyB,EAAXA,GAGzC7D,gBAAgByD,EAAWC,EAAWG,EAAoBF,GAC9DvC,UAAUmC,UAAYI,EACtBvC,UAAUwC,SAAW,EAAFH,EAAO,EAAFC,EAAgB,EAAXG,EAAyB,EAAXA,0EA3H/B9D,oBAAoB"}